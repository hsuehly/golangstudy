package bitOperation

import "fmt"

func Operations(str string) {
	fmt.Println(str)
	// 二进制输出 满 2 进1 0-1
	var num = 5
	fmt.Printf("num的二进制 %b \n", num)
	// 八进制， 满8进1 0-7
	var j = 011
	fmt.Println(j)
	// 十六进制 0-9 及 A-F 满16进1 以0x 或者0X 开头
	var k = 0x11
	fmt.Println(k)
	// 二进制转十进制
	// 规则： 从最低位开始（右边的， 将每个位上的数提取出来， 乘以2的(位数-1)次方， 然后求和
	// 八进制转十进制
	// 规则： 从最低位开始（右边的， 将每个位上的数提取出来， 乘以8的(位数-1)次方， 然后求和
	// 十六进制转十进制
	// 规则： 从最低位开始（右边的， 将每个位上的数提取出来， 乘以16的(位数-1)次方， 然后求和

	// 十进制转二进制
	// 规则：将该数不断除以2，直到商为0，然后将每步得到的余数倒过来，就是对应的二进制
	// 十进制转八进制
	// 规则：将该数不断除以8，直到商为0，然后将每步得到的余数倒过来，就是对应的八进制
	// 十进制转十六进制
	// 规则：将该数不断除以16，直到商为0，然后将每步得到的余数倒过来，就是对应的十六进制

	// 二进制转八进制
	// 规则：将二进制数每三位一组(从低位开始组合)，转成对应的八进制即可
	// 二进制转十六进制
	// 规则：将二进制数每四位一组(从低位开始组合)，转成对应的十六进制即可

	// 八进制转二进制
	// 规则：将八进制数每1位，转成对应的一个3位的二进制数即可
	// 八进制转二进制
	// 规则：将十六进制数每1位，转成对应的一个4位的二进制数即可

	fmt.Println(2 & 3)
	fmt.Println(2 | 3)
	fmt.Println(2 ^ 3)
	fmt.Println(-2 ^ 2)
	a := 1 >> 2
	b := 1 << 2
	fmt.Println(a, b)
}
